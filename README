/
*******************************************************************************
* PROJ 2: CalcYouLater
* Comp 15 October 18th 2022
* README
* Author: Hazel Scullin - hscull01
*******************************************************************************
/

Program Purpose:
---------------
    This program is the implementation of a Reverse Polish Notation 
    (RPN) calculator. RPN is also known as postâ€€fix notation. This program 
    allows for the use of basic mathmatical operations and comparisons 
    and allows execution of the calculator on inputted files. 

Compile/run:
-----------
    Compile using
        make parser

    Run executable with
        ./parser

    Compiled using
        make CalcYouLater
    
    Run executable with
        ./CalcYouLater
    

Acknowledgments:
---------------
    Harrison Sweet, yet again, for drawing pictures with me. 

Files:
-----

DatumStack.h: This is the interface for the DatumStack class. 
    It incudes all the functions in the vector library that 
    would allow a vector to act like a stack. There are capacity 
    and element access functions like size, isEmpty, and top that 
    return information about the vector and the Datum elements 
    in the vector. There are also modifying functions like clear, 
    pop, and push that edit the contents of the vector. 

DatumStack.cpp: This is the implementation for the DatumStack 
    class. It incudes all the functions in the vector library 
    that would allow a vector to act like a stack. There are 
    capacity and element access functions like size, isEmpty, 
    and top that return information about the vector and the 
    Datum elements in the vector. There are also modifying 
    functions like clear, pop, and push that edit the contents of 
    the vector. Some functions print error messages.

parser.cpp: The purpose of this file is to to turn whatever 
    is in the input stream into a string. It is comprised of one 
    functions which takes a reference to an istream as a parameter 
    to continue reading input from while it converts it all into 
    string form. 

unit_tests.h: A testing file for the DatumStack Class. 
    Tests individual functions for errors and runs valgrind. 

Makefile: File to build the program and link the according files 

RPNCalc.h
    The purpose of this file is to simulate an RPN calculator by calling 
    an instance of a DatumStack. We then manipulate this instance of the 
    DatumStack using basic mathmatical operations and comparisons. This 
    particular file is the interface for the RPNCalc class. It begins 
    our command loop and has functions that allow execution on files and 
    strings in addition to the basic mathmatical operations and comparisons.

RPNCalc.cpp
    The purpose of this file is to be the implementation of the RPNCalc class. 
    There are funtions within this file to perform basic mathmatical 
    operations and comparisons. There are also functions to execute 
    operations on files as well as strings. It operates as a loop that reads 
    in commands.

main.cpp
    The purpose of this file is to create and run one instance of the 
    RPNCalc class. 

test_file.cylc:
    sample list of commands that you could give to the calculator.
    
test_file2.cylc:
    sample list of commands that you could give to the calculator.

my_output.txt
    the file containing output from my program that I compared to 
    the ref_output.txt file

my_stdout.txt
    the file containing std output from my program that I compared to 
    the ref_stdout.txt file

ref_output.txt
    an example file containing the output of ./theCalcYouLater that is correct.

ref_stdout.txt
    an example file containing the std output of ./theCalcYouLater that
    is correct.

FibTest.cylc 
    sample list of commands to test and diff test my calculator with. 

FibTestEmpty.cylc 
    sample list of commands to test and diff test my calculator with. 

FibTestTrue.cylc 
    sample list of commands to test and diff test my calculator with. 

FibTestFalse.cylc
    sample list of commands to test and diff test my calculator with. 

Data Structures:
--------------- 
    A vector is not a data structure but I am using vectors to build my 
    DatumStack so that it can operate like a stack. So while we dont actually 
    use a std::stack, we do simulate a stack using our vector built 
    DatumStack. Stacks are data structures in which elements are always 
    added to the top of the stack. Stacks can be summarized by LIFO, meaning 
    last in first out and can be considered a more restricted version of a 
    linked list. In other words, the stack helps with managing LIFO so that 
    the element that is inserted last will alwyas come out first. They are 
    powerful because they create an abstraction barrier in which users cannot 
    edit the bottom of the stack. They can only interact with the top most 
    element. A possible disadvantage to this data structure is that the stack 
    memory has limited size and can overflow if too many objects are placed 
    on it. We used a stack in this program because this calculator runs in 
    reverse polish notation where the operator follows its operands. We 
    need a stack to handle this this notation type. For example, when 
    operands are found they are pushed them in the stack and then when an 
    operator is found, two items are popped from stack and then the 
    operation is performed in the correct sequence. Then the result is 
    pushed onto the stack. 
    
    We are familiar with stacks in our memory diagrams. The stack is a 
    stack! Or I guess I should call it the function call stack. With 
    the function calls the last function to be called is always going 
    to be the first one to return and finish. The function stack is to 
    keep track when each active function should return and complete executing. 
    Stacks can also be used for analyzing nested structures. We can check 
    if parenthesis, braces, and brackets are balanced. In this scenario, 
    the open brace, bracket, etc. starts a new task while the closed 
    brace, bracket, etc. will end the currently active task.

    A complex algorithm we could consider is the command loop. The 
    command loop is used for performing calculations as well as data 
    processing, for it gets all of the inputs and calls all of the 
    according functions to operate on the input. What I found most complex 
    about the command loop was being able to try adn ctch the appropriate 
    errors at the right time. That was very difficult to manage.
    More complex algorithms are the file and exec functions. They were 
    difficult because i was combining my knowledge of input streams and 
    string streams with everythign i needed to integrate file into the rest 
    of my program. For instance, i needed to remove the brackets off of the 
    rstring, and then I needed to create string streams, and then i needed 
    to call a new command loop etc. etc. It sounds easy at this point but 
    it was very difficult. 

Testing:
-------
    I used both unit_tests and ./parser (the excecutable) to test 
    my files. I tested the DatumStack in unit_tests where I made 
    individual tests for each of the functions I wrote in the 
    DatumStack class. I luckily didn't run into any errors when 
    testing this part of my code which was a huge win! (thats never 
    happened before) But then i ran into plenty of errors when 
    testing my parser function. I thought I had it all down until 
    I realzed that I was printing an extra space after the final 
    end bracket. It was hard to notice this issue and once I did, 
    this meant rearranging where I was printing the spaces in that 
    function. I decided to print the space before printing in the 
    newly read string instead of after. 

    I tested most of my individual functions of RPNCalc with unit test. 
    I uncluded as many edge cases as I could think of for the basic 
    mathmatical operations and comparisons. I implemented the basic 
    mathmatical operations and comparisons with ease and didnt run into 
    many errors. 
    The other functions prooved to be more complex. I used a number of 
    testing files of my own creation like FibTest.cylc FibTestEmpty.cylc 
    FibTestTrue.cylc FibTestFalse.cylc to test my own program. In some 
    tests I added many print statments that allowed me to debug more 
    easily. Fib_debug was very helpful for this reason too. In addition 
    to my testing files, I also ran my executable and compared it with 
    the correct given program. For example, in the terminal i ran this 
    for my calculator and THEcalculator
        5 3 - print 2 10 + print 12 3 / print 4 4 * print 16
    I learned in this type of in-terminal testing that I was throwing a 
    lot of the wrong errors and not testing all of the edge cases. For 
    example i needed to be prepared for division by zero and throw the 
    according error. I was also finding bugs where I was throwing an 
    error but it was not the correct one. For example I would write 
        3
        exec        // and then i would get 
        Error: datum_not_rstring
    vs THE calculator which gave this print statement 
        3
        exec
        Error: cannot execute non rstring
    I solved this with catching one error and throwing another error. 
    This prooved to be difficult but worthwhile because once I had done 
    try catch in the few spots that needed it, the code was back to running. 
    Later in the terminal I also had an error where it was sayinf
         : unimplemented
    after every call of exec. The solution was a rearrangement of when I 
    read commands in vs when i called the command loop on those commands 
    because I wasnt doing it in the correct order in my while loop. My 
    previous out of order version meant that I was running the commadn 
    loop one too many times and causing the program to get angry at me 
    because it didnt recognize endl.
    When making this fix I also solved my issue with the program not being 
    able to do the command "file" or "exec" on { } an rstring with no 
    characters. This problem i also tested and debugged with FibTestEmpty.cylc.